<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.alpgo.system.mapper.ImageMapper">
    
    <resultMap type="Image" id="ImageResult">
        <result property="imageId"    column="image_id"    />
        <result property="uri"    column="uri"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <resultMap type="ImageIdUrlVO" id="ImageIdUrlVOResult">
        <result property="imageId"    column="image_id"    />
        <result property="url"    column="url"    />
    </resultMap>
    <resultMap id="ImageImageProviderResult" type="Image" extends="ImageResult">
        <collection property="imageProviderList" notNullColumn="sub_provider_id" javaType="java.util.List" resultMap="ImageProviderResult" />
    </resultMap>

    <resultMap type="ImageProvider" id="ImageProviderResult">
        <result property="providerId"    column="sub_provider_id"    />
        <result property="envId"    column="sub_env_id"    />
        <result property="imageId"    column="sub_image_id"    />
        <result property="url"    column="sub_url"    />
        <result property="createBy"    column="sub_create_by"    />
        <result property="createTime"    column="sub_create_time"    />
        <result property="updateBy"    column="sub_update_by"    />
        <result property="updateTime"    column="sub_update_time"    />
    </resultMap>

    <sql id="selectImageVo">
        select image_id, uri, create_by, create_time, update_by, update_time from image
    </sql>

    <select id="selectImageList" parameterType="Image" resultMap="ImageResult">
        <include refid="selectImageVo"/>
        <where>  
            <if test="uri != null  and uri != ''"> and uri = #{uri}</if>
        </where>
    </select>
    
    <select id="selectImageByImageId" parameterType="Long" resultMap="ImageImageProviderResult">
        select a.image_id, a.uri, a.create_by, a.create_time, a.update_by, a.update_time,
 b.provider_id as sub_provider_id, b.env_id as sub_env_id, b.image_id as sub_image_id, b.url as sub_url, b.create_by as sub_create_by, b.create_time as sub_create_time, b.update_by as sub_update_by, b.update_time as sub_update_time
        from image a
        left join image_provider b on b.image_id = a.image_id
        where a.image_id = #{imageId}
    </select>
        
    <insert id="insertImage" parameterType="Image" useGeneratedKeys="true" keyProperty="imageId">
        insert into image
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uri != null and uri != ''">uri,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uri != null and uri != ''">#{uri},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateImage" parameterType="Image">
        update image
        <trim prefix="SET" suffixOverrides=",">
            <if test="uri != null and uri != ''">uri = #{uri},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where image_id = #{imageId}
    </update>

    <delete id="deleteImageByImageId" parameterType="Long">
        delete from image where image_id = #{imageId}
    </delete>

    <delete id="deleteImageByImageIds" parameterType="String">
        delete from image where image_id in 
        <foreach item="imageId" collection="array" open="(" separator="," close=")">
            #{imageId}
        </foreach>
    </delete>
    
    <delete id="deleteImageProviderByImageIds" parameterType="String">
        delete from image_provider where image_id in 
        <foreach item="imageId" collection="array" open="(" separator="," close=")">
            #{imageId}
        </foreach>
    </delete>

    <delete id="deleteImageProviderByImageId" parameterType="Long">
        delete from image_provider where image_id = #{imageId}
    </delete>

    <insert id="batchImageProvider">
        insert into image_provider( provider_id, env_id, image_id, url, create_by, create_time, update_by, update_time) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.providerId}, #{item.envId}, #{item.imageId}, #{item.url}, #{item.createBy}, #{item.createTime}, #{item.updateBy}, #{item.updateTime})
        </foreach>
    </insert>

    <select id="selectImageUrlsByImageIdsAndEnvId" resultMap="ImageIdUrlVOResult">
        select image_id, url from image_provider
        <where>
            env_id = #{envId} and
            image_id in
            <foreach item="imageId" collection="imageIds" open="(" separator="," close=")">
                #{imageId}
            </foreach>
        </where>
    </select>

    <select id="selectImageUrlsRandomCountAndEnvId" resultMap="ImageIdUrlVOResult">
        select image_id, url from image_provider
        <where>
            env_id = #{envId}
        </where>
        ORDER BY RAND () LIMIT #{imageCount};
    </select>
</mapper>